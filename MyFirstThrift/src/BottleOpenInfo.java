/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})

public class BottleOpenInfo implements org.apache.thrift.TBase<BottleOpenInfo, BottleOpenInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BottleOpenInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BottleOpenInfo");

  private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BOTTLE_OPEN_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("bottleOpenIdentifier", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BottleOpenInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BottleOpenInfoTupleSchemeFactory());
  }

  public String tagID; // required
  public String userName; // required
  public int bottleOpenIdentifier; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TAG_ID((short)1, "tagID"),
    USER_NAME((short)2, "userName"),
    BOTTLE_OPEN_IDENTIFIER((short)3, "bottleOpenIdentifier");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TAG_ID
          return TAG_ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // BOTTLE_OPEN_IDENTIFIER
          return BOTTLE_OPEN_IDENTIFIER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOTTLEOPENIDENTIFIER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOTTLE_OPEN_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("bottleOpenIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BottleOpenInfo.class, metaDataMap);
  }

  public BottleOpenInfo() {
  }

  public BottleOpenInfo(
    String tagID,
    String userName,
    int bottleOpenIdentifier)
  {
    this();
    this.tagID = tagID;
    this.userName = userName;
    this.bottleOpenIdentifier = bottleOpenIdentifier;
    setBottleOpenIdentifierIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BottleOpenInfo(BottleOpenInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTagID()) {
      this.tagID = other.tagID;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    this.bottleOpenIdentifier = other.bottleOpenIdentifier;
  }

  public BottleOpenInfo deepCopy() {
    return new BottleOpenInfo(this);
  }

  @Override
  public void clear() {
    this.tagID = null;
    this.userName = null;
    setBottleOpenIdentifierIsSet(false);
    this.bottleOpenIdentifier = 0;
  }

  public String getTagID() {
    return this.tagID;
  }

  public BottleOpenInfo setTagID(String tagID) {
    this.tagID = tagID;
    return this;
  }

  public void unsetTagID() {
    this.tagID = null;
  }

  /** Returns true if field tagID is set (has been assigned a value) and false otherwise */
  public boolean isSetTagID() {
    return this.tagID != null;
  }

  public void setTagIDIsSet(boolean value) {
    if (!value) {
      this.tagID = null;
    }
  }

  public String getUserName() {
    return this.userName;
  }

  public BottleOpenInfo setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public int getBottleOpenIdentifier() {
    return this.bottleOpenIdentifier;
  }

  public BottleOpenInfo setBottleOpenIdentifier(int bottleOpenIdentifier) {
    this.bottleOpenIdentifier = bottleOpenIdentifier;
    setBottleOpenIdentifierIsSet(true);
    return this;
  }

  public void unsetBottleOpenIdentifier() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOTTLEOPENIDENTIFIER_ISSET_ID);
  }

  /** Returns true if field bottleOpenIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetBottleOpenIdentifier() {
    return EncodingUtils.testBit(__isset_bitfield, __BOTTLEOPENIDENTIFIER_ISSET_ID);
  }

  public void setBottleOpenIdentifierIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOTTLEOPENIDENTIFIER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TAG_ID:
      if (value == null) {
        unsetTagID();
      } else {
        setTagID((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case BOTTLE_OPEN_IDENTIFIER:
      if (value == null) {
        unsetBottleOpenIdentifier();
      } else {
        setBottleOpenIdentifier((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TAG_ID:
      return getTagID();

    case USER_NAME:
      return getUserName();

    case BOTTLE_OPEN_IDENTIFIER:
      return getBottleOpenIdentifier();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TAG_ID:
      return isSetTagID();
    case USER_NAME:
      return isSetUserName();
    case BOTTLE_OPEN_IDENTIFIER:
      return isSetBottleOpenIdentifier();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BottleOpenInfo)
      return this.equals((BottleOpenInfo)that);
    return false;
  }

  public boolean equals(BottleOpenInfo that) {
    if (that == null)
      return false;

    boolean this_present_tagID = true && this.isSetTagID();
    boolean that_present_tagID = true && that.isSetTagID();
    if (this_present_tagID || that_present_tagID) {
      if (!(this_present_tagID && that_present_tagID))
        return false;
      if (!this.tagID.equals(that.tagID))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_bottleOpenIdentifier = true;
    boolean that_present_bottleOpenIdentifier = true;
    if (this_present_bottleOpenIdentifier || that_present_bottleOpenIdentifier) {
      if (!(this_present_bottleOpenIdentifier && that_present_bottleOpenIdentifier))
        return false;
      if (this.bottleOpenIdentifier != that.bottleOpenIdentifier)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tagID = true && (isSetTagID());
    list.add(present_tagID);
    if (present_tagID)
      list.add(tagID);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_bottleOpenIdentifier = true;
    list.add(present_bottleOpenIdentifier);
    if (present_bottleOpenIdentifier)
      list.add(bottleOpenIdentifier);

    return list.hashCode();
  }

  @Override
  public int compareTo(BottleOpenInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTagID()).compareTo(other.isSetTagID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagID, other.tagID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBottleOpenIdentifier()).compareTo(other.isSetBottleOpenIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBottleOpenIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bottleOpenIdentifier, other.bottleOpenIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BottleOpenInfo(");
    boolean first = true;

    sb.append("tagID:");
    if (this.tagID == null) {
      sb.append("null");
    } else {
      sb.append(this.tagID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bottleOpenIdentifier:");
    sb.append(this.bottleOpenIdentifier);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BottleOpenInfoStandardSchemeFactory implements SchemeFactory {
    public BottleOpenInfoStandardScheme getScheme() {
      return new BottleOpenInfoStandardScheme();
    }
  }

  private static class BottleOpenInfoStandardScheme extends StandardScheme<BottleOpenInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BottleOpenInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagID = iprot.readString();
              struct.setTagIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BOTTLE_OPEN_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bottleOpenIdentifier = iprot.readI32();
              struct.setBottleOpenIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BottleOpenInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tagID != null) {
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        oprot.writeString(struct.tagID);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BOTTLE_OPEN_IDENTIFIER_FIELD_DESC);
      oprot.writeI32(struct.bottleOpenIdentifier);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BottleOpenInfoTupleSchemeFactory implements SchemeFactory {
    public BottleOpenInfoTupleScheme getScheme() {
      return new BottleOpenInfoTupleScheme();
    }
  }

  private static class BottleOpenInfoTupleScheme extends TupleScheme<BottleOpenInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BottleOpenInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTagID()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetBottleOpenIdentifier()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTagID()) {
        oprot.writeString(struct.tagID);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetBottleOpenIdentifier()) {
        oprot.writeI32(struct.bottleOpenIdentifier);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BottleOpenInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.tagID = iprot.readString();
        struct.setTagIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bottleOpenIdentifier = iprot.readI32();
        struct.setBottleOpenIdentifierIsSet(true);
      }
    }
  }

}

