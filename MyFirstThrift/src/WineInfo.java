/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})

public class WineInfo implements org.apache.thrift.TBase<WineInfo, WineInfo._Fields>, java.io.Serializable, Cloneable, Comparable<WineInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WineInfo");

  private static final org.apache.thrift.protocol.TField IS_GENUINE_FIELD_DESC = new org.apache.thrift.protocol.TField("isGenuine", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField IS_SEALED_FIELD_DESC = new org.apache.thrift.protocol.TField("isSealed", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField WINE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("wineName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField WINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wineId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField WINE_PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("winePicURL", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField WINE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("wineRate", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATED_SECRET_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedSecretNumber", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WineInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WineInfoTupleSchemeFactory());
  }

  public boolean isGenuine; // required
  public boolean isSealed; // required
  public String wineName; // required
  public int wineId; // required
  public String winePicURL; // required
  public double wineRate; // required
  public int updatedSecretNumber; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_GENUINE((short)1, "isGenuine"),
    IS_SEALED((short)2, "isSealed"),
    WINE_NAME((short)3, "wineName"),
    WINE_ID((short)4, "wineId"),
    WINE_PIC_URL((short)5, "winePicURL"),
    WINE_RATE((short)6, "wineRate"),
    UPDATED_SECRET_NUMBER((short)7, "updatedSecretNumber");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_GENUINE
          return IS_GENUINE;
        case 2: // IS_SEALED
          return IS_SEALED;
        case 3: // WINE_NAME
          return WINE_NAME;
        case 4: // WINE_ID
          return WINE_ID;
        case 5: // WINE_PIC_URL
          return WINE_PIC_URL;
        case 6: // WINE_RATE
          return WINE_RATE;
        case 7: // UPDATED_SECRET_NUMBER
          return UPDATED_SECRET_NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISGENUINE_ISSET_ID = 0;
  private static final int __ISSEALED_ISSET_ID = 1;
  private static final int __WINEID_ISSET_ID = 2;
  private static final int __WINERATE_ISSET_ID = 3;
  private static final int __UPDATEDSECRETNUMBER_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_GENUINE, new org.apache.thrift.meta_data.FieldMetaData("isGenuine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_SEALED, new org.apache.thrift.meta_data.FieldMetaData("isSealed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WINE_NAME, new org.apache.thrift.meta_data.FieldMetaData("wineName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WINE_ID, new org.apache.thrift.meta_data.FieldMetaData("wineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WINE_PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("winePicURL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WINE_RATE, new org.apache.thrift.meta_data.FieldMetaData("wineRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPDATED_SECRET_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("updatedSecretNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WineInfo.class, metaDataMap);
  }

  public WineInfo() {
  }

  public WineInfo(
    boolean isGenuine,
    boolean isSealed,
    String wineName,
    int wineId,
    String winePicURL,
    double wineRate,
    int updatedSecretNumber)
  {
    this();
    this.isGenuine = isGenuine;
    setIsGenuineIsSet(true);
    this.isSealed = isSealed;
    setIsSealedIsSet(true);
    this.wineName = wineName;
    this.wineId = wineId;
    setWineIdIsSet(true);
    this.winePicURL = winePicURL;
    this.wineRate = wineRate;
    setWineRateIsSet(true);
    this.updatedSecretNumber = updatedSecretNumber;
    setUpdatedSecretNumberIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WineInfo(WineInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isGenuine = other.isGenuine;
    this.isSealed = other.isSealed;
    if (other.isSetWineName()) {
      this.wineName = other.wineName;
    }
    this.wineId = other.wineId;
    if (other.isSetWinePicURL()) {
      this.winePicURL = other.winePicURL;
    }
    this.wineRate = other.wineRate;
    this.updatedSecretNumber = other.updatedSecretNumber;
  }

  public WineInfo deepCopy() {
    return new WineInfo(this);
  }

  @Override
  public void clear() {
    setIsGenuineIsSet(false);
    this.isGenuine = false;
    setIsSealedIsSet(false);
    this.isSealed = false;
    this.wineName = null;
    setWineIdIsSet(false);
    this.wineId = 0;
    this.winePicURL = null;
    setWineRateIsSet(false);
    this.wineRate = 0.0;
    setUpdatedSecretNumberIsSet(false);
    this.updatedSecretNumber = 0;
  }

  public boolean isIsGenuine() {
    return this.isGenuine;
  }

  public WineInfo setIsGenuine(boolean isGenuine) {
    this.isGenuine = isGenuine;
    setIsGenuineIsSet(true);
    return this;
  }

  public void unsetIsGenuine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGENUINE_ISSET_ID);
  }

  /** Returns true if field isGenuine is set (has been assigned a value) and false otherwise */
  public boolean isSetIsGenuine() {
    return EncodingUtils.testBit(__isset_bitfield, __ISGENUINE_ISSET_ID);
  }

  public void setIsGenuineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGENUINE_ISSET_ID, value);
  }

  public boolean isIsSealed() {
    return this.isSealed;
  }

  public WineInfo setIsSealed(boolean isSealed) {
    this.isSealed = isSealed;
    setIsSealedIsSet(true);
    return this;
  }

  public void unsetIsSealed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSEALED_ISSET_ID);
  }

  /** Returns true if field isSealed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSealed() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSEALED_ISSET_ID);
  }

  public void setIsSealedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSEALED_ISSET_ID, value);
  }

  public String getWineName() {
    return this.wineName;
  }

  public WineInfo setWineName(String wineName) {
    this.wineName = wineName;
    return this;
  }

  public void unsetWineName() {
    this.wineName = null;
  }

  /** Returns true if field wineName is set (has been assigned a value) and false otherwise */
  public boolean isSetWineName() {
    return this.wineName != null;
  }

  public void setWineNameIsSet(boolean value) {
    if (!value) {
      this.wineName = null;
    }
  }

  public int getWineId() {
    return this.wineId;
  }

  public WineInfo setWineId(int wineId) {
    this.wineId = wineId;
    setWineIdIsSet(true);
    return this;
  }

  public void unsetWineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINEID_ISSET_ID);
  }

  /** Returns true if field wineId is set (has been assigned a value) and false otherwise */
  public boolean isSetWineId() {
    return EncodingUtils.testBit(__isset_bitfield, __WINEID_ISSET_ID);
  }

  public void setWineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINEID_ISSET_ID, value);
  }

  public String getWinePicURL() {
    return this.winePicURL;
  }

  public WineInfo setWinePicURL(String winePicURL) {
    this.winePicURL = winePicURL;
    return this;
  }

  public void unsetWinePicURL() {
    this.winePicURL = null;
  }

  /** Returns true if field winePicURL is set (has been assigned a value) and false otherwise */
  public boolean isSetWinePicURL() {
    return this.winePicURL != null;
  }

  public void setWinePicURLIsSet(boolean value) {
    if (!value) {
      this.winePicURL = null;
    }
  }

  public double getWineRate() {
    return this.wineRate;
  }

  public WineInfo setWineRate(double wineRate) {
    this.wineRate = wineRate;
    setWineRateIsSet(true);
    return this;
  }

  public void unsetWineRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINERATE_ISSET_ID);
  }

  /** Returns true if field wineRate is set (has been assigned a value) and false otherwise */
  public boolean isSetWineRate() {
    return EncodingUtils.testBit(__isset_bitfield, __WINERATE_ISSET_ID);
  }

  public void setWineRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINERATE_ISSET_ID, value);
  }

  public int getUpdatedSecretNumber() {
    return this.updatedSecretNumber;
  }

  public WineInfo setUpdatedSecretNumber(int updatedSecretNumber) {
    this.updatedSecretNumber = updatedSecretNumber;
    setUpdatedSecretNumberIsSet(true);
    return this;
  }

  public void unsetUpdatedSecretNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEDSECRETNUMBER_ISSET_ID);
  }

  /** Returns true if field updatedSecretNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedSecretNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEDSECRETNUMBER_ISSET_ID);
  }

  public void setUpdatedSecretNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEDSECRETNUMBER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_GENUINE:
      if (value == null) {
        unsetIsGenuine();
      } else {
        setIsGenuine((Boolean)value);
      }
      break;

    case IS_SEALED:
      if (value == null) {
        unsetIsSealed();
      } else {
        setIsSealed((Boolean)value);
      }
      break;

    case WINE_NAME:
      if (value == null) {
        unsetWineName();
      } else {
        setWineName((String)value);
      }
      break;

    case WINE_ID:
      if (value == null) {
        unsetWineId();
      } else {
        setWineId((Integer)value);
      }
      break;

    case WINE_PIC_URL:
      if (value == null) {
        unsetWinePicURL();
      } else {
        setWinePicURL((String)value);
      }
      break;

    case WINE_RATE:
      if (value == null) {
        unsetWineRate();
      } else {
        setWineRate((Double)value);
      }
      break;

    case UPDATED_SECRET_NUMBER:
      if (value == null) {
        unsetUpdatedSecretNumber();
      } else {
        setUpdatedSecretNumber((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_GENUINE:
      return isIsGenuine();

    case IS_SEALED:
      return isIsSealed();

    case WINE_NAME:
      return getWineName();

    case WINE_ID:
      return getWineId();

    case WINE_PIC_URL:
      return getWinePicURL();

    case WINE_RATE:
      return getWineRate();

    case UPDATED_SECRET_NUMBER:
      return getUpdatedSecretNumber();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_GENUINE:
      return isSetIsGenuine();
    case IS_SEALED:
      return isSetIsSealed();
    case WINE_NAME:
      return isSetWineName();
    case WINE_ID:
      return isSetWineId();
    case WINE_PIC_URL:
      return isSetWinePicURL();
    case WINE_RATE:
      return isSetWineRate();
    case UPDATED_SECRET_NUMBER:
      return isSetUpdatedSecretNumber();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WineInfo)
      return this.equals((WineInfo)that);
    return false;
  }

  public boolean equals(WineInfo that) {
    if (that == null)
      return false;

    boolean this_present_isGenuine = true;
    boolean that_present_isGenuine = true;
    if (this_present_isGenuine || that_present_isGenuine) {
      if (!(this_present_isGenuine && that_present_isGenuine))
        return false;
      if (this.isGenuine != that.isGenuine)
        return false;
    }

    boolean this_present_isSealed = true;
    boolean that_present_isSealed = true;
    if (this_present_isSealed || that_present_isSealed) {
      if (!(this_present_isSealed && that_present_isSealed))
        return false;
      if (this.isSealed != that.isSealed)
        return false;
    }

    boolean this_present_wineName = true && this.isSetWineName();
    boolean that_present_wineName = true && that.isSetWineName();
    if (this_present_wineName || that_present_wineName) {
      if (!(this_present_wineName && that_present_wineName))
        return false;
      if (!this.wineName.equals(that.wineName))
        return false;
    }

    boolean this_present_wineId = true;
    boolean that_present_wineId = true;
    if (this_present_wineId || that_present_wineId) {
      if (!(this_present_wineId && that_present_wineId))
        return false;
      if (this.wineId != that.wineId)
        return false;
    }

    boolean this_present_winePicURL = true && this.isSetWinePicURL();
    boolean that_present_winePicURL = true && that.isSetWinePicURL();
    if (this_present_winePicURL || that_present_winePicURL) {
      if (!(this_present_winePicURL && that_present_winePicURL))
        return false;
      if (!this.winePicURL.equals(that.winePicURL))
        return false;
    }

    boolean this_present_wineRate = true;
    boolean that_present_wineRate = true;
    if (this_present_wineRate || that_present_wineRate) {
      if (!(this_present_wineRate && that_present_wineRate))
        return false;
      if (this.wineRate != that.wineRate)
        return false;
    }

    boolean this_present_updatedSecretNumber = true;
    boolean that_present_updatedSecretNumber = true;
    if (this_present_updatedSecretNumber || that_present_updatedSecretNumber) {
      if (!(this_present_updatedSecretNumber && that_present_updatedSecretNumber))
        return false;
      if (this.updatedSecretNumber != that.updatedSecretNumber)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_isGenuine = true;
    list.add(present_isGenuine);
    if (present_isGenuine)
      list.add(isGenuine);

    boolean present_isSealed = true;
    list.add(present_isSealed);
    if (present_isSealed)
      list.add(isSealed);

    boolean present_wineName = true && (isSetWineName());
    list.add(present_wineName);
    if (present_wineName)
      list.add(wineName);

    boolean present_wineId = true;
    list.add(present_wineId);
    if (present_wineId)
      list.add(wineId);

    boolean present_winePicURL = true && (isSetWinePicURL());
    list.add(present_winePicURL);
    if (present_winePicURL)
      list.add(winePicURL);

    boolean present_wineRate = true;
    list.add(present_wineRate);
    if (present_wineRate)
      list.add(wineRate);

    boolean present_updatedSecretNumber = true;
    list.add(present_updatedSecretNumber);
    if (present_updatedSecretNumber)
      list.add(updatedSecretNumber);

    return list.hashCode();
  }

  @Override
  public int compareTo(WineInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIsGenuine()).compareTo(other.isSetIsGenuine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsGenuine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGenuine, other.isGenuine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSealed()).compareTo(other.isSetIsSealed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSealed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSealed, other.isSealed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineName()).compareTo(other.isSetWineName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineName, other.wineName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineId()).compareTo(other.isSetWineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineId, other.wineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWinePicURL()).compareTo(other.isSetWinePicURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWinePicURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winePicURL, other.winePicURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineRate()).compareTo(other.isSetWineRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineRate, other.wineRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedSecretNumber()).compareTo(other.isSetUpdatedSecretNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedSecretNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedSecretNumber, other.updatedSecretNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WineInfo(");
    boolean first = true;

    sb.append("isGenuine:");
    sb.append(this.isGenuine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSealed:");
    sb.append(this.isSealed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineName:");
    if (this.wineName == null) {
      sb.append("null");
    } else {
      sb.append(this.wineName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineId:");
    sb.append(this.wineId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("winePicURL:");
    if (this.winePicURL == null) {
      sb.append("null");
    } else {
      sb.append(this.winePicURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineRate:");
    sb.append(this.wineRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedSecretNumber:");
    sb.append(this.updatedSecretNumber);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WineInfoStandardSchemeFactory implements SchemeFactory {
    public WineInfoStandardScheme getScheme() {
      return new WineInfoStandardScheme();
    }
  }

  private static class WineInfoStandardScheme extends StandardScheme<WineInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WineInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_GENUINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isGenuine = iprot.readBool();
              struct.setIsGenuineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_SEALED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSealed = iprot.readBool();
              struct.setIsSealedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WINE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wineName = iprot.readString();
              struct.setWineNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wineId = iprot.readI32();
              struct.setWineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WINE_PIC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.winePicURL = iprot.readString();
              struct.setWinePicURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WINE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.wineRate = iprot.readDouble();
              struct.setWineRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATED_SECRET_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updatedSecretNumber = iprot.readI32();
              struct.setUpdatedSecretNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WineInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_GENUINE_FIELD_DESC);
      oprot.writeBool(struct.isGenuine);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SEALED_FIELD_DESC);
      oprot.writeBool(struct.isSealed);
      oprot.writeFieldEnd();
      if (struct.wineName != null) {
        oprot.writeFieldBegin(WINE_NAME_FIELD_DESC);
        oprot.writeString(struct.wineName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WINE_ID_FIELD_DESC);
      oprot.writeI32(struct.wineId);
      oprot.writeFieldEnd();
      if (struct.winePicURL != null) {
        oprot.writeFieldBegin(WINE_PIC_URL_FIELD_DESC);
        oprot.writeString(struct.winePicURL);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WINE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.wineRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATED_SECRET_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.updatedSecretNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WineInfoTupleSchemeFactory implements SchemeFactory {
    public WineInfoTupleScheme getScheme() {
      return new WineInfoTupleScheme();
    }
  }

  private static class WineInfoTupleScheme extends TupleScheme<WineInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WineInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIsGenuine()) {
        optionals.set(0);
      }
      if (struct.isSetIsSealed()) {
        optionals.set(1);
      }
      if (struct.isSetWineName()) {
        optionals.set(2);
      }
      if (struct.isSetWineId()) {
        optionals.set(3);
      }
      if (struct.isSetWinePicURL()) {
        optionals.set(4);
      }
      if (struct.isSetWineRate()) {
        optionals.set(5);
      }
      if (struct.isSetUpdatedSecretNumber()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetIsGenuine()) {
        oprot.writeBool(struct.isGenuine);
      }
      if (struct.isSetIsSealed()) {
        oprot.writeBool(struct.isSealed);
      }
      if (struct.isSetWineName()) {
        oprot.writeString(struct.wineName);
      }
      if (struct.isSetWineId()) {
        oprot.writeI32(struct.wineId);
      }
      if (struct.isSetWinePicURL()) {
        oprot.writeString(struct.winePicURL);
      }
      if (struct.isSetWineRate()) {
        oprot.writeDouble(struct.wineRate);
      }
      if (struct.isSetUpdatedSecretNumber()) {
        oprot.writeI32(struct.updatedSecretNumber);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WineInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.isGenuine = iprot.readBool();
        struct.setIsGenuineIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isSealed = iprot.readBool();
        struct.setIsSealedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.wineName = iprot.readString();
        struct.setWineNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.wineId = iprot.readI32();
        struct.setWineIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.winePicURL = iprot.readString();
        struct.setWinePicURLIsSet(true);
      }
      if (incoming.get(5)) {
        struct.wineRate = iprot.readDouble();
        struct.setWineRateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updatedSecretNumber = iprot.readI32();
        struct.setUpdatedSecretNumberIsSet(true);
      }
    }
  }

}

