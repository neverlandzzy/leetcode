/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})

public class WineReviewAndRatingReadResponse implements org.apache.thrift.TBase<WineReviewAndRatingReadResponse, WineReviewAndRatingReadResponse._Fields>, java.io.Serializable, Cloneable, Comparable<WineReviewAndRatingReadResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WineReviewAndRatingReadResponse");

  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_OF_RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("numOfRating", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_OF_REVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("numOfReview", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField AVERAGE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("averageRate", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WineReviewAndRatingReadResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WineReviewAndRatingReadResponseTupleSchemeFactory());
  }

  public List<WineReviewAndRatingData> data; // required
  public int numOfRating; // required
  public int numOfReview; // required
  public double averageRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA((short)1, "data"),
    NUM_OF_RATING((short)2, "numOfRating"),
    NUM_OF_REVIEW((short)3, "numOfReview"),
    AVERAGE_RATE((short)4, "averageRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA
          return DATA;
        case 2: // NUM_OF_RATING
          return NUM_OF_RATING;
        case 3: // NUM_OF_REVIEW
          return NUM_OF_REVIEW;
        case 4: // AVERAGE_RATE
          return AVERAGE_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMOFRATING_ISSET_ID = 0;
  private static final int __NUMOFREVIEW_ISSET_ID = 1;
  private static final int __AVERAGERATE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WineReviewAndRatingData.class))));
    tmpMap.put(_Fields.NUM_OF_RATING, new org.apache.thrift.meta_data.FieldMetaData("numOfRating", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_OF_REVIEW, new org.apache.thrift.meta_data.FieldMetaData("numOfReview", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVERAGE_RATE, new org.apache.thrift.meta_data.FieldMetaData("averageRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WineReviewAndRatingReadResponse.class, metaDataMap);
  }

  public WineReviewAndRatingReadResponse() {
  }

  public WineReviewAndRatingReadResponse(
    List<WineReviewAndRatingData> data,
    int numOfRating,
    int numOfReview,
    double averageRate)
  {
    this();
    this.data = data;
    this.numOfRating = numOfRating;
    setNumOfRatingIsSet(true);
    this.numOfReview = numOfReview;
    setNumOfReviewIsSet(true);
    this.averageRate = averageRate;
    setAverageRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WineReviewAndRatingReadResponse(WineReviewAndRatingReadResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetData()) {
      List<WineReviewAndRatingData> __this__data = new ArrayList<WineReviewAndRatingData>(other.data.size());
      for (WineReviewAndRatingData other_element : other.data) {
        __this__data.add(new WineReviewAndRatingData(other_element));
      }
      this.data = __this__data;
    }
    this.numOfRating = other.numOfRating;
    this.numOfReview = other.numOfReview;
    this.averageRate = other.averageRate;
  }

  public WineReviewAndRatingReadResponse deepCopy() {
    return new WineReviewAndRatingReadResponse(this);
  }

  @Override
  public void clear() {
    this.data = null;
    setNumOfRatingIsSet(false);
    this.numOfRating = 0;
    setNumOfReviewIsSet(false);
    this.numOfReview = 0;
    setAverageRateIsSet(false);
    this.averageRate = 0.0;
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public java.util.Iterator<WineReviewAndRatingData> getDataIterator() {
    return (this.data == null) ? null : this.data.iterator();
  }

  public void addToData(WineReviewAndRatingData elem) {
    if (this.data == null) {
      this.data = new ArrayList<WineReviewAndRatingData>();
    }
    this.data.add(elem);
  }

  public List<WineReviewAndRatingData> getData() {
    return this.data;
  }

  public WineReviewAndRatingReadResponse setData(List<WineReviewAndRatingData> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public int getNumOfRating() {
    return this.numOfRating;
  }

  public WineReviewAndRatingReadResponse setNumOfRating(int numOfRating) {
    this.numOfRating = numOfRating;
    setNumOfRatingIsSet(true);
    return this;
  }

  public void unsetNumOfRating() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMOFRATING_ISSET_ID);
  }

  /** Returns true if field numOfRating is set (has been assigned a value) and false otherwise */
  public boolean isSetNumOfRating() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMOFRATING_ISSET_ID);
  }

  public void setNumOfRatingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMOFRATING_ISSET_ID, value);
  }

  public int getNumOfReview() {
    return this.numOfReview;
  }

  public WineReviewAndRatingReadResponse setNumOfReview(int numOfReview) {
    this.numOfReview = numOfReview;
    setNumOfReviewIsSet(true);
    return this;
  }

  public void unsetNumOfReview() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMOFREVIEW_ISSET_ID);
  }

  /** Returns true if field numOfReview is set (has been assigned a value) and false otherwise */
  public boolean isSetNumOfReview() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMOFREVIEW_ISSET_ID);
  }

  public void setNumOfReviewIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMOFREVIEW_ISSET_ID, value);
  }

  public double getAverageRate() {
    return this.averageRate;
  }

  public WineReviewAndRatingReadResponse setAverageRate(double averageRate) {
    this.averageRate = averageRate;
    setAverageRateIsSet(true);
    return this;
  }

  public void unsetAverageRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGERATE_ISSET_ID);
  }

  /** Returns true if field averageRate is set (has been assigned a value) and false otherwise */
  public boolean isSetAverageRate() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGERATE_ISSET_ID);
  }

  public void setAverageRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGERATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((List<WineReviewAndRatingData>)value);
      }
      break;

    case NUM_OF_RATING:
      if (value == null) {
        unsetNumOfRating();
      } else {
        setNumOfRating((Integer)value);
      }
      break;

    case NUM_OF_REVIEW:
      if (value == null) {
        unsetNumOfReview();
      } else {
        setNumOfReview((Integer)value);
      }
      break;

    case AVERAGE_RATE:
      if (value == null) {
        unsetAverageRate();
      } else {
        setAverageRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA:
      return getData();

    case NUM_OF_RATING:
      return getNumOfRating();

    case NUM_OF_REVIEW:
      return getNumOfReview();

    case AVERAGE_RATE:
      return getAverageRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA:
      return isSetData();
    case NUM_OF_RATING:
      return isSetNumOfRating();
    case NUM_OF_REVIEW:
      return isSetNumOfReview();
    case AVERAGE_RATE:
      return isSetAverageRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WineReviewAndRatingReadResponse)
      return this.equals((WineReviewAndRatingReadResponse)that);
    return false;
  }

  public boolean equals(WineReviewAndRatingReadResponse that) {
    if (that == null)
      return false;

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_numOfRating = true;
    boolean that_present_numOfRating = true;
    if (this_present_numOfRating || that_present_numOfRating) {
      if (!(this_present_numOfRating && that_present_numOfRating))
        return false;
      if (this.numOfRating != that.numOfRating)
        return false;
    }

    boolean this_present_numOfReview = true;
    boolean that_present_numOfReview = true;
    if (this_present_numOfReview || that_present_numOfReview) {
      if (!(this_present_numOfReview && that_present_numOfReview))
        return false;
      if (this.numOfReview != that.numOfReview)
        return false;
    }

    boolean this_present_averageRate = true;
    boolean that_present_averageRate = true;
    if (this_present_averageRate || that_present_averageRate) {
      if (!(this_present_averageRate && that_present_averageRate))
        return false;
      if (this.averageRate != that.averageRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_data = true && (isSetData());
    list.add(present_data);
    if (present_data)
      list.add(data);

    boolean present_numOfRating = true;
    list.add(present_numOfRating);
    if (present_numOfRating)
      list.add(numOfRating);

    boolean present_numOfReview = true;
    list.add(present_numOfReview);
    if (present_numOfReview)
      list.add(numOfReview);

    boolean present_averageRate = true;
    list.add(present_averageRate);
    if (present_averageRate)
      list.add(averageRate);

    return list.hashCode();
  }

  @Override
  public int compareTo(WineReviewAndRatingReadResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumOfRating()).compareTo(other.isSetNumOfRating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumOfRating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numOfRating, other.numOfRating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumOfReview()).compareTo(other.isSetNumOfReview());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumOfReview()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numOfReview, other.numOfReview);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAverageRate()).compareTo(other.isSetAverageRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAverageRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averageRate, other.averageRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WineReviewAndRatingReadResponse(");
    boolean first = true;

    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numOfRating:");
    sb.append(this.numOfRating);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numOfReview:");
    sb.append(this.numOfReview);
    first = false;
    if (!first) sb.append(", ");
    sb.append("averageRate:");
    sb.append(this.averageRate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WineReviewAndRatingReadResponseStandardSchemeFactory implements SchemeFactory {
    public WineReviewAndRatingReadResponseStandardScheme getScheme() {
      return new WineReviewAndRatingReadResponseStandardScheme();
    }
  }

  private static class WineReviewAndRatingReadResponseStandardScheme extends StandardScheme<WineReviewAndRatingReadResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WineReviewAndRatingReadResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.data = new ArrayList<WineReviewAndRatingData>(_list8.size);
                WineReviewAndRatingData _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new WineReviewAndRatingData();
                  _elem9.read(iprot);
                  struct.data.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_OF_RATING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numOfRating = iprot.readI32();
              struct.setNumOfRatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_OF_REVIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numOfReview = iprot.readI32();
              struct.setNumOfReviewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AVERAGE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.averageRate = iprot.readDouble();
              struct.setAverageRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WineReviewAndRatingReadResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
          for (WineReviewAndRatingData _iter11 : struct.data)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_OF_RATING_FIELD_DESC);
      oprot.writeI32(struct.numOfRating);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_OF_REVIEW_FIELD_DESC);
      oprot.writeI32(struct.numOfReview);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVERAGE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.averageRate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WineReviewAndRatingReadResponseTupleSchemeFactory implements SchemeFactory {
    public WineReviewAndRatingReadResponseTupleScheme getScheme() {
      return new WineReviewAndRatingReadResponseTupleScheme();
    }
  }

  private static class WineReviewAndRatingReadResponseTupleScheme extends TupleScheme<WineReviewAndRatingReadResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WineReviewAndRatingReadResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetData()) {
        optionals.set(0);
      }
      if (struct.isSetNumOfRating()) {
        optionals.set(1);
      }
      if (struct.isSetNumOfReview()) {
        optionals.set(2);
      }
      if (struct.isSetAverageRate()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetData()) {
        {
          oprot.writeI32(struct.data.size());
          for (WineReviewAndRatingData _iter12 : struct.data)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetNumOfRating()) {
        oprot.writeI32(struct.numOfRating);
      }
      if (struct.isSetNumOfReview()) {
        oprot.writeI32(struct.numOfReview);
      }
      if (struct.isSetAverageRate()) {
        oprot.writeDouble(struct.averageRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WineReviewAndRatingReadResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.data = new ArrayList<WineReviewAndRatingData>(_list13.size);
          WineReviewAndRatingData _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new WineReviewAndRatingData();
            _elem14.read(iprot);
            struct.data.add(_elem14);
          }
        }
        struct.setDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.numOfRating = iprot.readI32();
        struct.setNumOfRatingIsSet(true);
      }
      if (incoming.get(2)) {
        struct.numOfReview = iprot.readI32();
        struct.setNumOfReviewIsSet(true);
      }
      if (incoming.get(3)) {
        struct.averageRate = iprot.readDouble();
        struct.setAverageRateIsSet(true);
      }
    }
  }

}

