/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})

public class WineBasicInfoResponse implements org.apache.thrift.TBase<WineBasicInfoResponse, WineBasicInfoResponse._Fields>, java.io.Serializable, Cloneable, Comparable<WineBasicInfoResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WineBasicInfoResponse");

  private static final org.apache.thrift.protocol.TField WINE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("wineName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WINERY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("wineryName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NATIONAL_FLAG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("nationalFlagUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField THE_WINE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("theWineInfo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FOOD_PAIRING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("foodPairingInfo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CELLARING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("cellaringInfo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FOOD_PARING_PICS_FIELD_DESC = new org.apache.thrift.protocol.TField("foodParingPics", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField REGION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("regionName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REGION_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("regionInfo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField WINERY_WEBSITE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("wineryWebsiteUrl", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField WINERY_LOGO_PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("wineryLogoPicUrl", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField GRAPE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("grapeInfo", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WineBasicInfoResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WineBasicInfoResponseTupleSchemeFactory());
  }

  public String wineName; // required
  public String wineryName; // required
  public String location; // required
  public String nationalFlagUrl; // required
  public String theWineInfo; // required
  public String foodPairingInfo; // required
  public String cellaringInfo; // required
  public List<FoodParingPics> foodParingPics; // required
  public String regionName; // required
  public String regionInfo; // required
  public String wineryWebsiteUrl; // required
  public String wineryLogoPicUrl; // required
  public String grapeInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WINE_NAME((short)1, "wineName"),
    WINERY_NAME((short)2, "wineryName"),
    LOCATION((short)3, "location"),
    NATIONAL_FLAG_URL((short)4, "nationalFlagUrl"),
    THE_WINE_INFO((short)5, "theWineInfo"),
    FOOD_PAIRING_INFO((short)6, "foodPairingInfo"),
    CELLARING_INFO((short)7, "cellaringInfo"),
    FOOD_PARING_PICS((short)8, "foodParingPics"),
    REGION_NAME((short)9, "regionName"),
    REGION_INFO((short)10, "regionInfo"),
    WINERY_WEBSITE_URL((short)11, "wineryWebsiteUrl"),
    WINERY_LOGO_PIC_URL((short)12, "wineryLogoPicUrl"),
    GRAPE_INFO((short)13, "grapeInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WINE_NAME
          return WINE_NAME;
        case 2: // WINERY_NAME
          return WINERY_NAME;
        case 3: // LOCATION
          return LOCATION;
        case 4: // NATIONAL_FLAG_URL
          return NATIONAL_FLAG_URL;
        case 5: // THE_WINE_INFO
          return THE_WINE_INFO;
        case 6: // FOOD_PAIRING_INFO
          return FOOD_PAIRING_INFO;
        case 7: // CELLARING_INFO
          return CELLARING_INFO;
        case 8: // FOOD_PARING_PICS
          return FOOD_PARING_PICS;
        case 9: // REGION_NAME
          return REGION_NAME;
        case 10: // REGION_INFO
          return REGION_INFO;
        case 11: // WINERY_WEBSITE_URL
          return WINERY_WEBSITE_URL;
        case 12: // WINERY_LOGO_PIC_URL
          return WINERY_LOGO_PIC_URL;
        case 13: // GRAPE_INFO
          return GRAPE_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WINE_NAME, new org.apache.thrift.meta_data.FieldMetaData("wineName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WINERY_NAME, new org.apache.thrift.meta_data.FieldMetaData("wineryName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NATIONAL_FLAG_URL, new org.apache.thrift.meta_data.FieldMetaData("nationalFlagUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THE_WINE_INFO, new org.apache.thrift.meta_data.FieldMetaData("theWineInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOOD_PAIRING_INFO, new org.apache.thrift.meta_data.FieldMetaData("foodPairingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CELLARING_INFO, new org.apache.thrift.meta_data.FieldMetaData("cellaringInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOOD_PARING_PICS, new org.apache.thrift.meta_data.FieldMetaData("foodParingPics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FoodParingPics.class))));
    tmpMap.put(_Fields.REGION_NAME, new org.apache.thrift.meta_data.FieldMetaData("regionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION_INFO, new org.apache.thrift.meta_data.FieldMetaData("regionInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WINERY_WEBSITE_URL, new org.apache.thrift.meta_data.FieldMetaData("wineryWebsiteUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WINERY_LOGO_PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("wineryLogoPicUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GRAPE_INFO, new org.apache.thrift.meta_data.FieldMetaData("grapeInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WineBasicInfoResponse.class, metaDataMap);
  }

  public WineBasicInfoResponse() {
  }

  public WineBasicInfoResponse(
    String wineName,
    String wineryName,
    String location,
    String nationalFlagUrl,
    String theWineInfo,
    String foodPairingInfo,
    String cellaringInfo,
    List<FoodParingPics> foodParingPics,
    String regionName,
    String regionInfo,
    String wineryWebsiteUrl,
    String wineryLogoPicUrl,
    String grapeInfo)
  {
    this();
    this.wineName = wineName;
    this.wineryName = wineryName;
    this.location = location;
    this.nationalFlagUrl = nationalFlagUrl;
    this.theWineInfo = theWineInfo;
    this.foodPairingInfo = foodPairingInfo;
    this.cellaringInfo = cellaringInfo;
    this.foodParingPics = foodParingPics;
    this.regionName = regionName;
    this.regionInfo = regionInfo;
    this.wineryWebsiteUrl = wineryWebsiteUrl;
    this.wineryLogoPicUrl = wineryLogoPicUrl;
    this.grapeInfo = grapeInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WineBasicInfoResponse(WineBasicInfoResponse other) {
    if (other.isSetWineName()) {
      this.wineName = other.wineName;
    }
    if (other.isSetWineryName()) {
      this.wineryName = other.wineryName;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetNationalFlagUrl()) {
      this.nationalFlagUrl = other.nationalFlagUrl;
    }
    if (other.isSetTheWineInfo()) {
      this.theWineInfo = other.theWineInfo;
    }
    if (other.isSetFoodPairingInfo()) {
      this.foodPairingInfo = other.foodPairingInfo;
    }
    if (other.isSetCellaringInfo()) {
      this.cellaringInfo = other.cellaringInfo;
    }
    if (other.isSetFoodParingPics()) {
      List<FoodParingPics> __this__foodParingPics = new ArrayList<FoodParingPics>(other.foodParingPics.size());
      for (FoodParingPics other_element : other.foodParingPics) {
        __this__foodParingPics.add(new FoodParingPics(other_element));
      }
      this.foodParingPics = __this__foodParingPics;
    }
    if (other.isSetRegionName()) {
      this.regionName = other.regionName;
    }
    if (other.isSetRegionInfo()) {
      this.regionInfo = other.regionInfo;
    }
    if (other.isSetWineryWebsiteUrl()) {
      this.wineryWebsiteUrl = other.wineryWebsiteUrl;
    }
    if (other.isSetWineryLogoPicUrl()) {
      this.wineryLogoPicUrl = other.wineryLogoPicUrl;
    }
    if (other.isSetGrapeInfo()) {
      this.grapeInfo = other.grapeInfo;
    }
  }

  public WineBasicInfoResponse deepCopy() {
    return new WineBasicInfoResponse(this);
  }

  @Override
  public void clear() {
    this.wineName = null;
    this.wineryName = null;
    this.location = null;
    this.nationalFlagUrl = null;
    this.theWineInfo = null;
    this.foodPairingInfo = null;
    this.cellaringInfo = null;
    this.foodParingPics = null;
    this.regionName = null;
    this.regionInfo = null;
    this.wineryWebsiteUrl = null;
    this.wineryLogoPicUrl = null;
    this.grapeInfo = null;
  }

  public String getWineName() {
    return this.wineName;
  }

  public WineBasicInfoResponse setWineName(String wineName) {
    this.wineName = wineName;
    return this;
  }

  public void unsetWineName() {
    this.wineName = null;
  }

  /** Returns true if field wineName is set (has been assigned a value) and false otherwise */
  public boolean isSetWineName() {
    return this.wineName != null;
  }

  public void setWineNameIsSet(boolean value) {
    if (!value) {
      this.wineName = null;
    }
  }

  public String getWineryName() {
    return this.wineryName;
  }

  public WineBasicInfoResponse setWineryName(String wineryName) {
    this.wineryName = wineryName;
    return this;
  }

  public void unsetWineryName() {
    this.wineryName = null;
  }

  /** Returns true if field wineryName is set (has been assigned a value) and false otherwise */
  public boolean isSetWineryName() {
    return this.wineryName != null;
  }

  public void setWineryNameIsSet(boolean value) {
    if (!value) {
      this.wineryName = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public WineBasicInfoResponse setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public String getNationalFlagUrl() {
    return this.nationalFlagUrl;
  }

  public WineBasicInfoResponse setNationalFlagUrl(String nationalFlagUrl) {
    this.nationalFlagUrl = nationalFlagUrl;
    return this;
  }

  public void unsetNationalFlagUrl() {
    this.nationalFlagUrl = null;
  }

  /** Returns true if field nationalFlagUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetNationalFlagUrl() {
    return this.nationalFlagUrl != null;
  }

  public void setNationalFlagUrlIsSet(boolean value) {
    if (!value) {
      this.nationalFlagUrl = null;
    }
  }

  public String getTheWineInfo() {
    return this.theWineInfo;
  }

  public WineBasicInfoResponse setTheWineInfo(String theWineInfo) {
    this.theWineInfo = theWineInfo;
    return this;
  }

  public void unsetTheWineInfo() {
    this.theWineInfo = null;
  }

  /** Returns true if field theWineInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTheWineInfo() {
    return this.theWineInfo != null;
  }

  public void setTheWineInfoIsSet(boolean value) {
    if (!value) {
      this.theWineInfo = null;
    }
  }

  public String getFoodPairingInfo() {
    return this.foodPairingInfo;
  }

  public WineBasicInfoResponse setFoodPairingInfo(String foodPairingInfo) {
    this.foodPairingInfo = foodPairingInfo;
    return this;
  }

  public void unsetFoodPairingInfo() {
    this.foodPairingInfo = null;
  }

  /** Returns true if field foodPairingInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodPairingInfo() {
    return this.foodPairingInfo != null;
  }

  public void setFoodPairingInfoIsSet(boolean value) {
    if (!value) {
      this.foodPairingInfo = null;
    }
  }

  public String getCellaringInfo() {
    return this.cellaringInfo;
  }

  public WineBasicInfoResponse setCellaringInfo(String cellaringInfo) {
    this.cellaringInfo = cellaringInfo;
    return this;
  }

  public void unsetCellaringInfo() {
    this.cellaringInfo = null;
  }

  /** Returns true if field cellaringInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCellaringInfo() {
    return this.cellaringInfo != null;
  }

  public void setCellaringInfoIsSet(boolean value) {
    if (!value) {
      this.cellaringInfo = null;
    }
  }

  public int getFoodParingPicsSize() {
    return (this.foodParingPics == null) ? 0 : this.foodParingPics.size();
  }

  public java.util.Iterator<FoodParingPics> getFoodParingPicsIterator() {
    return (this.foodParingPics == null) ? null : this.foodParingPics.iterator();
  }

  public void addToFoodParingPics(FoodParingPics elem) {
    if (this.foodParingPics == null) {
      this.foodParingPics = new ArrayList<FoodParingPics>();
    }
    this.foodParingPics.add(elem);
  }

  public List<FoodParingPics> getFoodParingPics() {
    return this.foodParingPics;
  }

  public WineBasicInfoResponse setFoodParingPics(List<FoodParingPics> foodParingPics) {
    this.foodParingPics = foodParingPics;
    return this;
  }

  public void unsetFoodParingPics() {
    this.foodParingPics = null;
  }

  /** Returns true if field foodParingPics is set (has been assigned a value) and false otherwise */
  public boolean isSetFoodParingPics() {
    return this.foodParingPics != null;
  }

  public void setFoodParingPicsIsSet(boolean value) {
    if (!value) {
      this.foodParingPics = null;
    }
  }

  public String getRegionName() {
    return this.regionName;
  }

  public WineBasicInfoResponse setRegionName(String regionName) {
    this.regionName = regionName;
    return this;
  }

  public void unsetRegionName() {
    this.regionName = null;
  }

  /** Returns true if field regionName is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionName() {
    return this.regionName != null;
  }

  public void setRegionNameIsSet(boolean value) {
    if (!value) {
      this.regionName = null;
    }
  }

  public String getRegionInfo() {
    return this.regionInfo;
  }

  public WineBasicInfoResponse setRegionInfo(String regionInfo) {
    this.regionInfo = regionInfo;
    return this;
  }

  public void unsetRegionInfo() {
    this.regionInfo = null;
  }

  /** Returns true if field regionInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionInfo() {
    return this.regionInfo != null;
  }

  public void setRegionInfoIsSet(boolean value) {
    if (!value) {
      this.regionInfo = null;
    }
  }

  public String getWineryWebsiteUrl() {
    return this.wineryWebsiteUrl;
  }

  public WineBasicInfoResponse setWineryWebsiteUrl(String wineryWebsiteUrl) {
    this.wineryWebsiteUrl = wineryWebsiteUrl;
    return this;
  }

  public void unsetWineryWebsiteUrl() {
    this.wineryWebsiteUrl = null;
  }

  /** Returns true if field wineryWebsiteUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetWineryWebsiteUrl() {
    return this.wineryWebsiteUrl != null;
  }

  public void setWineryWebsiteUrlIsSet(boolean value) {
    if (!value) {
      this.wineryWebsiteUrl = null;
    }
  }

  public String getWineryLogoPicUrl() {
    return this.wineryLogoPicUrl;
  }

  public WineBasicInfoResponse setWineryLogoPicUrl(String wineryLogoPicUrl) {
    this.wineryLogoPicUrl = wineryLogoPicUrl;
    return this;
  }

  public void unsetWineryLogoPicUrl() {
    this.wineryLogoPicUrl = null;
  }

  /** Returns true if field wineryLogoPicUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetWineryLogoPicUrl() {
    return this.wineryLogoPicUrl != null;
  }

  public void setWineryLogoPicUrlIsSet(boolean value) {
    if (!value) {
      this.wineryLogoPicUrl = null;
    }
  }

  public String getGrapeInfo() {
    return this.grapeInfo;
  }

  public WineBasicInfoResponse setGrapeInfo(String grapeInfo) {
    this.grapeInfo = grapeInfo;
    return this;
  }

  public void unsetGrapeInfo() {
    this.grapeInfo = null;
  }

  /** Returns true if field grapeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetGrapeInfo() {
    return this.grapeInfo != null;
  }

  public void setGrapeInfoIsSet(boolean value) {
    if (!value) {
      this.grapeInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WINE_NAME:
      if (value == null) {
        unsetWineName();
      } else {
        setWineName((String)value);
      }
      break;

    case WINERY_NAME:
      if (value == null) {
        unsetWineryName();
      } else {
        setWineryName((String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case NATIONAL_FLAG_URL:
      if (value == null) {
        unsetNationalFlagUrl();
      } else {
        setNationalFlagUrl((String)value);
      }
      break;

    case THE_WINE_INFO:
      if (value == null) {
        unsetTheWineInfo();
      } else {
        setTheWineInfo((String)value);
      }
      break;

    case FOOD_PAIRING_INFO:
      if (value == null) {
        unsetFoodPairingInfo();
      } else {
        setFoodPairingInfo((String)value);
      }
      break;

    case CELLARING_INFO:
      if (value == null) {
        unsetCellaringInfo();
      } else {
        setCellaringInfo((String)value);
      }
      break;

    case FOOD_PARING_PICS:
      if (value == null) {
        unsetFoodParingPics();
      } else {
        setFoodParingPics((List<FoodParingPics>)value);
      }
      break;

    case REGION_NAME:
      if (value == null) {
        unsetRegionName();
      } else {
        setRegionName((String)value);
      }
      break;

    case REGION_INFO:
      if (value == null) {
        unsetRegionInfo();
      } else {
        setRegionInfo((String)value);
      }
      break;

    case WINERY_WEBSITE_URL:
      if (value == null) {
        unsetWineryWebsiteUrl();
      } else {
        setWineryWebsiteUrl((String)value);
      }
      break;

    case WINERY_LOGO_PIC_URL:
      if (value == null) {
        unsetWineryLogoPicUrl();
      } else {
        setWineryLogoPicUrl((String)value);
      }
      break;

    case GRAPE_INFO:
      if (value == null) {
        unsetGrapeInfo();
      } else {
        setGrapeInfo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WINE_NAME:
      return getWineName();

    case WINERY_NAME:
      return getWineryName();

    case LOCATION:
      return getLocation();

    case NATIONAL_FLAG_URL:
      return getNationalFlagUrl();

    case THE_WINE_INFO:
      return getTheWineInfo();

    case FOOD_PAIRING_INFO:
      return getFoodPairingInfo();

    case CELLARING_INFO:
      return getCellaringInfo();

    case FOOD_PARING_PICS:
      return getFoodParingPics();

    case REGION_NAME:
      return getRegionName();

    case REGION_INFO:
      return getRegionInfo();

    case WINERY_WEBSITE_URL:
      return getWineryWebsiteUrl();

    case WINERY_LOGO_PIC_URL:
      return getWineryLogoPicUrl();

    case GRAPE_INFO:
      return getGrapeInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WINE_NAME:
      return isSetWineName();
    case WINERY_NAME:
      return isSetWineryName();
    case LOCATION:
      return isSetLocation();
    case NATIONAL_FLAG_URL:
      return isSetNationalFlagUrl();
    case THE_WINE_INFO:
      return isSetTheWineInfo();
    case FOOD_PAIRING_INFO:
      return isSetFoodPairingInfo();
    case CELLARING_INFO:
      return isSetCellaringInfo();
    case FOOD_PARING_PICS:
      return isSetFoodParingPics();
    case REGION_NAME:
      return isSetRegionName();
    case REGION_INFO:
      return isSetRegionInfo();
    case WINERY_WEBSITE_URL:
      return isSetWineryWebsiteUrl();
    case WINERY_LOGO_PIC_URL:
      return isSetWineryLogoPicUrl();
    case GRAPE_INFO:
      return isSetGrapeInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WineBasicInfoResponse)
      return this.equals((WineBasicInfoResponse)that);
    return false;
  }

  public boolean equals(WineBasicInfoResponse that) {
    if (that == null)
      return false;

    boolean this_present_wineName = true && this.isSetWineName();
    boolean that_present_wineName = true && that.isSetWineName();
    if (this_present_wineName || that_present_wineName) {
      if (!(this_present_wineName && that_present_wineName))
        return false;
      if (!this.wineName.equals(that.wineName))
        return false;
    }

    boolean this_present_wineryName = true && this.isSetWineryName();
    boolean that_present_wineryName = true && that.isSetWineryName();
    if (this_present_wineryName || that_present_wineryName) {
      if (!(this_present_wineryName && that_present_wineryName))
        return false;
      if (!this.wineryName.equals(that.wineryName))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_nationalFlagUrl = true && this.isSetNationalFlagUrl();
    boolean that_present_nationalFlagUrl = true && that.isSetNationalFlagUrl();
    if (this_present_nationalFlagUrl || that_present_nationalFlagUrl) {
      if (!(this_present_nationalFlagUrl && that_present_nationalFlagUrl))
        return false;
      if (!this.nationalFlagUrl.equals(that.nationalFlagUrl))
        return false;
    }

    boolean this_present_theWineInfo = true && this.isSetTheWineInfo();
    boolean that_present_theWineInfo = true && that.isSetTheWineInfo();
    if (this_present_theWineInfo || that_present_theWineInfo) {
      if (!(this_present_theWineInfo && that_present_theWineInfo))
        return false;
      if (!this.theWineInfo.equals(that.theWineInfo))
        return false;
    }

    boolean this_present_foodPairingInfo = true && this.isSetFoodPairingInfo();
    boolean that_present_foodPairingInfo = true && that.isSetFoodPairingInfo();
    if (this_present_foodPairingInfo || that_present_foodPairingInfo) {
      if (!(this_present_foodPairingInfo && that_present_foodPairingInfo))
        return false;
      if (!this.foodPairingInfo.equals(that.foodPairingInfo))
        return false;
    }

    boolean this_present_cellaringInfo = true && this.isSetCellaringInfo();
    boolean that_present_cellaringInfo = true && that.isSetCellaringInfo();
    if (this_present_cellaringInfo || that_present_cellaringInfo) {
      if (!(this_present_cellaringInfo && that_present_cellaringInfo))
        return false;
      if (!this.cellaringInfo.equals(that.cellaringInfo))
        return false;
    }

    boolean this_present_foodParingPics = true && this.isSetFoodParingPics();
    boolean that_present_foodParingPics = true && that.isSetFoodParingPics();
    if (this_present_foodParingPics || that_present_foodParingPics) {
      if (!(this_present_foodParingPics && that_present_foodParingPics))
        return false;
      if (!this.foodParingPics.equals(that.foodParingPics))
        return false;
    }

    boolean this_present_regionName = true && this.isSetRegionName();
    boolean that_present_regionName = true && that.isSetRegionName();
    if (this_present_regionName || that_present_regionName) {
      if (!(this_present_regionName && that_present_regionName))
        return false;
      if (!this.regionName.equals(that.regionName))
        return false;
    }

    boolean this_present_regionInfo = true && this.isSetRegionInfo();
    boolean that_present_regionInfo = true && that.isSetRegionInfo();
    if (this_present_regionInfo || that_present_regionInfo) {
      if (!(this_present_regionInfo && that_present_regionInfo))
        return false;
      if (!this.regionInfo.equals(that.regionInfo))
        return false;
    }

    boolean this_present_wineryWebsiteUrl = true && this.isSetWineryWebsiteUrl();
    boolean that_present_wineryWebsiteUrl = true && that.isSetWineryWebsiteUrl();
    if (this_present_wineryWebsiteUrl || that_present_wineryWebsiteUrl) {
      if (!(this_present_wineryWebsiteUrl && that_present_wineryWebsiteUrl))
        return false;
      if (!this.wineryWebsiteUrl.equals(that.wineryWebsiteUrl))
        return false;
    }

    boolean this_present_wineryLogoPicUrl = true && this.isSetWineryLogoPicUrl();
    boolean that_present_wineryLogoPicUrl = true && that.isSetWineryLogoPicUrl();
    if (this_present_wineryLogoPicUrl || that_present_wineryLogoPicUrl) {
      if (!(this_present_wineryLogoPicUrl && that_present_wineryLogoPicUrl))
        return false;
      if (!this.wineryLogoPicUrl.equals(that.wineryLogoPicUrl))
        return false;
    }

    boolean this_present_grapeInfo = true && this.isSetGrapeInfo();
    boolean that_present_grapeInfo = true && that.isSetGrapeInfo();
    if (this_present_grapeInfo || that_present_grapeInfo) {
      if (!(this_present_grapeInfo && that_present_grapeInfo))
        return false;
      if (!this.grapeInfo.equals(that.grapeInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_wineName = true && (isSetWineName());
    list.add(present_wineName);
    if (present_wineName)
      list.add(wineName);

    boolean present_wineryName = true && (isSetWineryName());
    list.add(present_wineryName);
    if (present_wineryName)
      list.add(wineryName);

    boolean present_location = true && (isSetLocation());
    list.add(present_location);
    if (present_location)
      list.add(location);

    boolean present_nationalFlagUrl = true && (isSetNationalFlagUrl());
    list.add(present_nationalFlagUrl);
    if (present_nationalFlagUrl)
      list.add(nationalFlagUrl);

    boolean present_theWineInfo = true && (isSetTheWineInfo());
    list.add(present_theWineInfo);
    if (present_theWineInfo)
      list.add(theWineInfo);

    boolean present_foodPairingInfo = true && (isSetFoodPairingInfo());
    list.add(present_foodPairingInfo);
    if (present_foodPairingInfo)
      list.add(foodPairingInfo);

    boolean present_cellaringInfo = true && (isSetCellaringInfo());
    list.add(present_cellaringInfo);
    if (present_cellaringInfo)
      list.add(cellaringInfo);

    boolean present_foodParingPics = true && (isSetFoodParingPics());
    list.add(present_foodParingPics);
    if (present_foodParingPics)
      list.add(foodParingPics);

    boolean present_regionName = true && (isSetRegionName());
    list.add(present_regionName);
    if (present_regionName)
      list.add(regionName);

    boolean present_regionInfo = true && (isSetRegionInfo());
    list.add(present_regionInfo);
    if (present_regionInfo)
      list.add(regionInfo);

    boolean present_wineryWebsiteUrl = true && (isSetWineryWebsiteUrl());
    list.add(present_wineryWebsiteUrl);
    if (present_wineryWebsiteUrl)
      list.add(wineryWebsiteUrl);

    boolean present_wineryLogoPicUrl = true && (isSetWineryLogoPicUrl());
    list.add(present_wineryLogoPicUrl);
    if (present_wineryLogoPicUrl)
      list.add(wineryLogoPicUrl);

    boolean present_grapeInfo = true && (isSetGrapeInfo());
    list.add(present_grapeInfo);
    if (present_grapeInfo)
      list.add(grapeInfo);

    return list.hashCode();
  }

  @Override
  public int compareTo(WineBasicInfoResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWineName()).compareTo(other.isSetWineName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineName, other.wineName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineryName()).compareTo(other.isSetWineryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineryName, other.wineryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNationalFlagUrl()).compareTo(other.isSetNationalFlagUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationalFlagUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationalFlagUrl, other.nationalFlagUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTheWineInfo()).compareTo(other.isSetTheWineInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTheWineInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.theWineInfo, other.theWineInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoodPairingInfo()).compareTo(other.isSetFoodPairingInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodPairingInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodPairingInfo, other.foodPairingInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCellaringInfo()).compareTo(other.isSetCellaringInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCellaringInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cellaringInfo, other.cellaringInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoodParingPics()).compareTo(other.isSetFoodParingPics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoodParingPics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foodParingPics, other.foodParingPics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionName()).compareTo(other.isSetRegionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionName, other.regionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionInfo()).compareTo(other.isSetRegionInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionInfo, other.regionInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineryWebsiteUrl()).compareTo(other.isSetWineryWebsiteUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineryWebsiteUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineryWebsiteUrl, other.wineryWebsiteUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineryLogoPicUrl()).compareTo(other.isSetWineryLogoPicUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineryLogoPicUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineryLogoPicUrl, other.wineryLogoPicUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrapeInfo()).compareTo(other.isSetGrapeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrapeInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grapeInfo, other.grapeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WineBasicInfoResponse(");
    boolean first = true;

    sb.append("wineName:");
    if (this.wineName == null) {
      sb.append("null");
    } else {
      sb.append(this.wineName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineryName:");
    if (this.wineryName == null) {
      sb.append("null");
    } else {
      sb.append(this.wineryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nationalFlagUrl:");
    if (this.nationalFlagUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.nationalFlagUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("theWineInfo:");
    if (this.theWineInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.theWineInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foodPairingInfo:");
    if (this.foodPairingInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.foodPairingInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cellaringInfo:");
    if (this.cellaringInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.cellaringInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foodParingPics:");
    if (this.foodParingPics == null) {
      sb.append("null");
    } else {
      sb.append(this.foodParingPics);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionName:");
    if (this.regionName == null) {
      sb.append("null");
    } else {
      sb.append(this.regionName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionInfo:");
    if (this.regionInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.regionInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineryWebsiteUrl:");
    if (this.wineryWebsiteUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.wineryWebsiteUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineryLogoPicUrl:");
    if (this.wineryLogoPicUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.wineryLogoPicUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("grapeInfo:");
    if (this.grapeInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.grapeInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WineBasicInfoResponseStandardSchemeFactory implements SchemeFactory {
    public WineBasicInfoResponseStandardScheme getScheme() {
      return new WineBasicInfoResponseStandardScheme();
    }
  }

  private static class WineBasicInfoResponseStandardScheme extends StandardScheme<WineBasicInfoResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WineBasicInfoResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WINE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wineName = iprot.readString();
              struct.setWineNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WINERY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wineryName = iprot.readString();
              struct.setWineryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NATIONAL_FLAG_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nationalFlagUrl = iprot.readString();
              struct.setNationalFlagUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // THE_WINE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.theWineInfo = iprot.readString();
              struct.setTheWineInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FOOD_PAIRING_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foodPairingInfo = iprot.readString();
              struct.setFoodPairingInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CELLARING_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cellaringInfo = iprot.readString();
              struct.setCellaringInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FOOD_PARING_PICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.foodParingPics = new ArrayList<FoodParingPics>(_list0.size);
                FoodParingPics _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new FoodParingPics();
                  _elem1.read(iprot);
                  struct.foodParingPics.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFoodParingPicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REGION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regionName = iprot.readString();
              struct.setRegionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REGION_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regionInfo = iprot.readString();
              struct.setRegionInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WINERY_WEBSITE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wineryWebsiteUrl = iprot.readString();
              struct.setWineryWebsiteUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // WINERY_LOGO_PIC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wineryLogoPicUrl = iprot.readString();
              struct.setWineryLogoPicUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GRAPE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.grapeInfo = iprot.readString();
              struct.setGrapeInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WineBasicInfoResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.wineName != null) {
        oprot.writeFieldBegin(WINE_NAME_FIELD_DESC);
        oprot.writeString(struct.wineName);
        oprot.writeFieldEnd();
      }
      if (struct.wineryName != null) {
        oprot.writeFieldBegin(WINERY_NAME_FIELD_DESC);
        oprot.writeString(struct.wineryName);
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        oprot.writeString(struct.location);
        oprot.writeFieldEnd();
      }
      if (struct.nationalFlagUrl != null) {
        oprot.writeFieldBegin(NATIONAL_FLAG_URL_FIELD_DESC);
        oprot.writeString(struct.nationalFlagUrl);
        oprot.writeFieldEnd();
      }
      if (struct.theWineInfo != null) {
        oprot.writeFieldBegin(THE_WINE_INFO_FIELD_DESC);
        oprot.writeString(struct.theWineInfo);
        oprot.writeFieldEnd();
      }
      if (struct.foodPairingInfo != null) {
        oprot.writeFieldBegin(FOOD_PAIRING_INFO_FIELD_DESC);
        oprot.writeString(struct.foodPairingInfo);
        oprot.writeFieldEnd();
      }
      if (struct.cellaringInfo != null) {
        oprot.writeFieldBegin(CELLARING_INFO_FIELD_DESC);
        oprot.writeString(struct.cellaringInfo);
        oprot.writeFieldEnd();
      }
      if (struct.foodParingPics != null) {
        oprot.writeFieldBegin(FOOD_PARING_PICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.foodParingPics.size()));
          for (FoodParingPics _iter3 : struct.foodParingPics)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.regionName != null) {
        oprot.writeFieldBegin(REGION_NAME_FIELD_DESC);
        oprot.writeString(struct.regionName);
        oprot.writeFieldEnd();
      }
      if (struct.regionInfo != null) {
        oprot.writeFieldBegin(REGION_INFO_FIELD_DESC);
        oprot.writeString(struct.regionInfo);
        oprot.writeFieldEnd();
      }
      if (struct.wineryWebsiteUrl != null) {
        oprot.writeFieldBegin(WINERY_WEBSITE_URL_FIELD_DESC);
        oprot.writeString(struct.wineryWebsiteUrl);
        oprot.writeFieldEnd();
      }
      if (struct.wineryLogoPicUrl != null) {
        oprot.writeFieldBegin(WINERY_LOGO_PIC_URL_FIELD_DESC);
        oprot.writeString(struct.wineryLogoPicUrl);
        oprot.writeFieldEnd();
      }
      if (struct.grapeInfo != null) {
        oprot.writeFieldBegin(GRAPE_INFO_FIELD_DESC);
        oprot.writeString(struct.grapeInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WineBasicInfoResponseTupleSchemeFactory implements SchemeFactory {
    public WineBasicInfoResponseTupleScheme getScheme() {
      return new WineBasicInfoResponseTupleScheme();
    }
  }

  private static class WineBasicInfoResponseTupleScheme extends TupleScheme<WineBasicInfoResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WineBasicInfoResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWineName()) {
        optionals.set(0);
      }
      if (struct.isSetWineryName()) {
        optionals.set(1);
      }
      if (struct.isSetLocation()) {
        optionals.set(2);
      }
      if (struct.isSetNationalFlagUrl()) {
        optionals.set(3);
      }
      if (struct.isSetTheWineInfo()) {
        optionals.set(4);
      }
      if (struct.isSetFoodPairingInfo()) {
        optionals.set(5);
      }
      if (struct.isSetCellaringInfo()) {
        optionals.set(6);
      }
      if (struct.isSetFoodParingPics()) {
        optionals.set(7);
      }
      if (struct.isSetRegionName()) {
        optionals.set(8);
      }
      if (struct.isSetRegionInfo()) {
        optionals.set(9);
      }
      if (struct.isSetWineryWebsiteUrl()) {
        optionals.set(10);
      }
      if (struct.isSetWineryLogoPicUrl()) {
        optionals.set(11);
      }
      if (struct.isSetGrapeInfo()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetWineName()) {
        oprot.writeString(struct.wineName);
      }
      if (struct.isSetWineryName()) {
        oprot.writeString(struct.wineryName);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetNationalFlagUrl()) {
        oprot.writeString(struct.nationalFlagUrl);
      }
      if (struct.isSetTheWineInfo()) {
        oprot.writeString(struct.theWineInfo);
      }
      if (struct.isSetFoodPairingInfo()) {
        oprot.writeString(struct.foodPairingInfo);
      }
      if (struct.isSetCellaringInfo()) {
        oprot.writeString(struct.cellaringInfo);
      }
      if (struct.isSetFoodParingPics()) {
        {
          oprot.writeI32(struct.foodParingPics.size());
          for (FoodParingPics _iter4 : struct.foodParingPics)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetRegionName()) {
        oprot.writeString(struct.regionName);
      }
      if (struct.isSetRegionInfo()) {
        oprot.writeString(struct.regionInfo);
      }
      if (struct.isSetWineryWebsiteUrl()) {
        oprot.writeString(struct.wineryWebsiteUrl);
      }
      if (struct.isSetWineryLogoPicUrl()) {
        oprot.writeString(struct.wineryLogoPicUrl);
      }
      if (struct.isSetGrapeInfo()) {
        oprot.writeString(struct.grapeInfo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WineBasicInfoResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.wineName = iprot.readString();
        struct.setWineNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wineryName = iprot.readString();
        struct.setWineryNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nationalFlagUrl = iprot.readString();
        struct.setNationalFlagUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.theWineInfo = iprot.readString();
        struct.setTheWineInfoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.foodPairingInfo = iprot.readString();
        struct.setFoodPairingInfoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cellaringInfo = iprot.readString();
        struct.setCellaringInfoIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.foodParingPics = new ArrayList<FoodParingPics>(_list5.size);
          FoodParingPics _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new FoodParingPics();
            _elem6.read(iprot);
            struct.foodParingPics.add(_elem6);
          }
        }
        struct.setFoodParingPicsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.regionName = iprot.readString();
        struct.setRegionNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.regionInfo = iprot.readString();
        struct.setRegionInfoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.wineryWebsiteUrl = iprot.readString();
        struct.setWineryWebsiteUrlIsSet(true);
      }
      if (incoming.get(11)) {
        struct.wineryLogoPicUrl = iprot.readString();
        struct.setWineryLogoPicUrlIsSet(true);
      }
      if (incoming.get(12)) {
        struct.grapeInfo = iprot.readString();
        struct.setGrapeInfoIsSet(true);
      }
    }
  }

}

